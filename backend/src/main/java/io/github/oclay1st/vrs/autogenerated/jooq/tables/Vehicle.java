/*
 * This file is generated by jOOQ.
 */
package io.github.oclay1st.vrs.autogenerated.jooq.tables;


import io.github.oclay1st.vrs.autogenerated.jooq.DefaultSchema;
import io.github.oclay1st.vrs.autogenerated.jooq.Keys;
import io.github.oclay1st.vrs.autogenerated.jooq.tables.records.VehicleRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Vehicle extends TableImpl<VehicleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>vehicle</code>
     */
    public static final Vehicle VEHICLE = new Vehicle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VehicleRecord> getRecordType() {
        return VehicleRecord.class;
    }

    /**
     * The column <code>vehicle.vin</code>.
     */
    public final TableField<VehicleRecord, Long> VIN = createField(DSL.name("vin"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>vehicle.license_plate</code>.
     */
    public final TableField<VehicleRecord, String> LICENSE_PLATE = createField(DSL.name("license_plate"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>vehicle.type</code>.
     */
    public final TableField<VehicleRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>vehicle.details</code>.
     */
    public final TableField<VehicleRecord, JSON> DETAILS = createField(DSL.name("details"), SQLDataType.JSON, this, "");

    /**
     * The column <code>vehicle.created_at</code>.
     */
    public final TableField<VehicleRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>vehicle.updated_at</code>.
     */
    public final TableField<VehicleRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private Vehicle(Name alias, Table<VehicleRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Vehicle(Name alias, Table<VehicleRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>vehicle</code> table reference
     */
    public Vehicle(String alias) {
        this(DSL.name(alias), VEHICLE);
    }

    /**
     * Create an aliased <code>vehicle</code> table reference
     */
    public Vehicle(Name alias) {
        this(alias, VEHICLE);
    }

    /**
     * Create a <code>vehicle</code> table reference
     */
    public Vehicle() {
        this(DSL.name("vehicle"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<VehicleRecord> getPrimaryKey() {
        return Keys.VEHICLE_PK;
    }

    @Override
    public List<UniqueKey<VehicleRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CONSTRAINT_1);
    }

    @Override
    public Vehicle as(String alias) {
        return new Vehicle(DSL.name(alias), this);
    }

    @Override
    public Vehicle as(Name alias) {
        return new Vehicle(alias, this);
    }

    @Override
    public Vehicle as(Table<?> alias) {
        return new Vehicle(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Vehicle rename(String name) {
        return new Vehicle(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vehicle rename(Name name) {
        return new Vehicle(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vehicle rename(Table<?> name) {
        return new Vehicle(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vehicle where(Condition condition) {
        return new Vehicle(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vehicle where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vehicle where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vehicle where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vehicle where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vehicle where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vehicle where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vehicle where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vehicle whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vehicle whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
