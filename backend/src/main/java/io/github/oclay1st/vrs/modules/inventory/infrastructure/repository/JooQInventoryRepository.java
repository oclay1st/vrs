package io.github.oclay1st.vrs.modules.inventory.infrastructure.repository;

import org.jooq.DSLContext;
import org.jooq.JSON;
import org.springframework.stereotype.Repository;

import static io.github.oclay1st.vrs.autogenerated.jooq.tables.Vehicle.VEHICLE;

import io.github.oclay1st.vrs.autogenerated.jooq.tables.records.VehicleRecord;
import io.github.oclay1st.vrs.modules.common.Utils;
import io.github.oclay1st.vrs.modules.inventory.domain.command.RegisterVehicleCommand;
import io.github.oclay1st.vrs.modules.inventory.domain.repository.InventoryRepository;

@Repository
public class JooQInventoryRepository implements InventoryRepository {

    private final DSLContext client;

    public JooQInventoryRepository(DSLContext client) {
        this.client = client;
    }

    @Override
    public void registerVehicle(RegisterVehicleCommand command) {
        VehicleRecord vehicleRecord = client.newRecord(VEHICLE);
        vehicleRecord.setVin(command.getVin());
        vehicleRecord.setLicensePlate(command.getLicensePlate());
        vehicleRecord.setType(command.getType().name());
        vehicleRecord.setCreatedAt(command.getCreatedAt());
        vehicleRecord.setUpdatedAt(command.getUpdatedAt());
        String details = switch (command.getType()) {
            case DIESEL -> Utils.convertObjectToString(command.getDieselInfo());
            case GASOLINE -> Utils.convertObjectToString(command.getGasInfo());
            case ELECTRIC -> Utils.convertObjectToString(command.getElectricInfo());
        };
        vehicleRecord.setDetails(JSON.json(details));
        vehicleRecord.store();
    }

    public boolean existsByVIN(Long vin) {
        return client.fetchExists(VEHICLE, VEHICLE.VIN.eq(vin));
    }

    public boolean existsByLicensePlate(String licensePlate) {
        return client.fetchExists(VEHICLE, VEHICLE.LICENSE_PLATE.eq(licensePlate));
    }

}
