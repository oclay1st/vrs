/*
 * This file is generated by jOOQ.
 */
package io.github.oclay1st.vrs.autogenerated.jooq.tables;


import io.github.oclay1st.vrs.autogenerated.jooq.DefaultSchema;
import io.github.oclay1st.vrs.autogenerated.jooq.Keys;
import io.github.oclay1st.vrs.autogenerated.jooq.tables.User.UserPath;
import io.github.oclay1st.vrs.autogenerated.jooq.tables.records.ArchivedVehicleRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ArchivedVehicle extends TableImpl<ArchivedVehicleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>archived_vehicle</code>
     */
    public static final ArchivedVehicle ARCHIVED_VEHICLE = new ArchivedVehicle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArchivedVehicleRecord> getRecordType() {
        return ArchivedVehicleRecord.class;
    }

    /**
     * The column <code>archived_vehicle.id</code>.
     */
    public final TableField<ArchivedVehicleRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>archived_vehicle.vin</code>.
     */
    public final TableField<ArchivedVehicleRecord, Long> VIN = createField(DSL.name("vin"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>archived_vehicle.license_plate</code>.
     */
    public final TableField<ArchivedVehicleRecord, String> LICENSE_PLATE = createField(DSL.name("license_plate"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>archived_vehicle.type</code>.
     */
    public final TableField<ArchivedVehicleRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>archived_vehicle.diesel_injection_pump_type</code>.
     */
    public final TableField<ArchivedVehicleRecord, String> DIESEL_INJECTION_PUMP_TYPE = createField(DSL.name("diesel_injection_pump_type"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>archived_vehicle.gas_fuel_types</code>.
     */
    public final TableField<ArchivedVehicleRecord, String> GAS_FUEL_TYPES = createField(DSL.name("gas_fuel_types"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>archived_vehicle.battery_type</code>.
     */
    public final TableField<ArchivedVehicleRecord, String> BATTERY_TYPE = createField(DSL.name("battery_type"), SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>archived_vehicle.battery_voltage</code>.
     */
    public final TableField<ArchivedVehicleRecord, Integer> BATTERY_VOLTAGE = createField(DSL.name("battery_voltage"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>archived_vehicle.battery_amperage</code>.
     */
    public final TableField<ArchivedVehicleRecord, Integer> BATTERY_AMPERAGE = createField(DSL.name("battery_amperage"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>archived_vehicle.registered_at</code>.
     */
    public final TableField<ArchivedVehicleRecord, LocalDateTime> REGISTERED_AT = createField(DSL.name("registered_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>archived_vehicle.archived_at</code>.
     */
    public final TableField<ArchivedVehicleRecord, LocalDateTime> ARCHIVED_AT = createField(DSL.name("archived_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>archived_vehicle.user_id</code>.
     */
    public final TableField<ArchivedVehicleRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private ArchivedVehicle(Name alias, Table<ArchivedVehicleRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ArchivedVehicle(Name alias, Table<ArchivedVehicleRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>archived_vehicle</code> table reference
     */
    public ArchivedVehicle(String alias) {
        this(DSL.name(alias), ARCHIVED_VEHICLE);
    }

    /**
     * Create an aliased <code>archived_vehicle</code> table reference
     */
    public ArchivedVehicle(Name alias) {
        this(alias, ARCHIVED_VEHICLE);
    }

    /**
     * Create a <code>archived_vehicle</code> table reference
     */
    public ArchivedVehicle() {
        this(DSL.name("archived_vehicle"), null);
    }

    public <O extends Record> ArchivedVehicle(Table<O> path, ForeignKey<O, ArchivedVehicleRecord> childPath, InverseForeignKey<O, ArchivedVehicleRecord> parentPath) {
        super(path, childPath, parentPath, ARCHIVED_VEHICLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ArchivedVehiclePath extends ArchivedVehicle implements Path<ArchivedVehicleRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ArchivedVehiclePath(Table<O> path, ForeignKey<O, ArchivedVehicleRecord> childPath, InverseForeignKey<O, ArchivedVehicleRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ArchivedVehiclePath(Name alias, Table<ArchivedVehicleRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ArchivedVehiclePath as(String alias) {
            return new ArchivedVehiclePath(DSL.name(alias), this);
        }

        @Override
        public ArchivedVehiclePath as(Name alias) {
            return new ArchivedVehiclePath(alias, this);
        }

        @Override
        public ArchivedVehiclePath as(Table<?> alias) {
            return new ArchivedVehiclePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<ArchivedVehicleRecord, Long> getIdentity() {
        return (Identity<ArchivedVehicleRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ArchivedVehicleRecord> getPrimaryKey() {
        return Keys.ARCHIVED_VEHICLE_PK;
    }

    @Override
    public List<ForeignKey<ArchivedVehicleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ARCHIVED_VEHICLE_USER_ID_FK);
    }

    private transient UserPath _user;

    /**
     * Get the implicit join path to the <code>user</code> table.
     */
    public UserPath user() {
        if (_user == null)
            _user = new UserPath(this, Keys.ARCHIVED_VEHICLE_USER_ID_FK, null);

        return _user;
    }

    @Override
    public ArchivedVehicle as(String alias) {
        return new ArchivedVehicle(DSL.name(alias), this);
    }

    @Override
    public ArchivedVehicle as(Name alias) {
        return new ArchivedVehicle(alias, this);
    }

    @Override
    public ArchivedVehicle as(Table<?> alias) {
        return new ArchivedVehicle(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArchivedVehicle rename(String name) {
        return new ArchivedVehicle(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArchivedVehicle rename(Name name) {
        return new ArchivedVehicle(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArchivedVehicle rename(Table<?> name) {
        return new ArchivedVehicle(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArchivedVehicle where(Condition condition) {
        return new ArchivedVehicle(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArchivedVehicle where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArchivedVehicle where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArchivedVehicle where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ArchivedVehicle where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ArchivedVehicle where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ArchivedVehicle where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ArchivedVehicle where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArchivedVehicle whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArchivedVehicle whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
