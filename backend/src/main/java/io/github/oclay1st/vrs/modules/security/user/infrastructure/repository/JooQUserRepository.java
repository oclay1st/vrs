package io.github.oclay1st.vrs.modules.security.user.infrastructure.repository;

import org.jooq.Condition;
import org.jooq.DSLContext;
import org.jooq.impl.DSL;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

import static io.github.oclay1st.vrs.autogenerated.jooq.tables.User.USER;

import io.github.oclay1st.vrs.autogenerated.jooq.tables.records.UserRecord;
import io.github.oclay1st.vrs.modules.common.Page;
import io.github.oclay1st.vrs.modules.common.PageCriteria;
import io.github.oclay1st.vrs.modules.security.user.domain.command.RegisterUserCommand;
import io.github.oclay1st.vrs.modules.security.user.domain.criteria.UserCriteria;
import io.github.oclay1st.vrs.modules.security.user.domain.projection.UserView;
import io.github.oclay1st.vrs.modules.security.user.domain.repository.UserRepository;

@Repository
public class JooQUserRepository implements UserRepository {

    private final DSLContext client;

    public JooQUserRepository(DSLContext client) {
        this.client = client;
    }

    @Override
    public void create(RegisterUserCommand command) {
        UserRecord userRecord = client.newRecord(USER);
        userRecord.setUsername(command.getUsername());
        userRecord.setPassword(command.getPassword());
        userRecord.setName(command.getName());
        userRecord.setLastName(command.getLastName());
        userRecord.setActive(command.isActive());
        userRecord.setCreatedAt(command.getCreatedAt());
        userRecord.setUpdatedAt(command.getUpdateAt());
        userRecord.store();
    }

    @Override
    public boolean existByUsername(String username) {
        return client.fetchExists(USER, USER.USERNAME.eq(username));
    }

    @Override
    public Optional<UserView> findByUsername(String username) {
        return client.select(USER.ID, USER.USERNAME, USER.NAME, USER.LAST_NAME)
                .from(USER)
                .where(USER.USERNAME.eq(username))
                .fetchOptionalInto(UserView.class);
    }

    @Override
    public Page<UserView> findByCriteria(UserCriteria criteria, PageCriteria pageCriteria) {
        Condition condition = parseCriteria(criteria);
        int totalItems = client.fetchCount(USER, condition);
        if (totalItems == 0) {
            return Page.empty(pageCriteria.page(), pageCriteria.size());
        }
        List<UserView> items = client
                .select(USER.ID, USER.USERNAME, USER.NAME, USER.LAST_NAME)
                .from(USER)
                .where(condition)
                .offset(pageCriteria.offset())
                .limit(pageCriteria.size())
                .fetchInto(UserView.class);
        return new Page<>(items, pageCriteria.page(), pageCriteria.size(), totalItems);
    }

    private Condition parseCriteria(UserCriteria criteria) {
        Condition condition = DSL.noCondition();
        if (criteria.search() != null && !criteria.search().isBlank()) {
            condition = condition.and(USER.NAME.likeIgnoreCase("%" + criteria.search() + "%")
                    .or(USER.LAST_NAME.likeIgnoreCase("%" + criteria.search() + "%")));
        }
        return condition;
    }

}
